blueprint:
  name: Custom Moe's Zigbee Switch - Detached Mode - Basic - NO Light Controls
  author: jzxandy
  description: >
    ## üîò Toggle Light(s) with Button(s) and Sync LED Indicator(s) - No light control options


    Control lights using one or more momentary toggle buttons and have indicator LEDs synchronised with the opposite state. 



    This blueprint does not supports optional brightness, transition or colour settings. There is a separate blueprint for that, but I have kept them separate for now in case there are issues with having those options present.

    - üîÅ Triggered if any of the "Button Toggle(s)" change from **released ‚Üí press** (applicable to custom flashed Moe's light switches).

    - üí° Toggles the `main_entity` (referred to below as "Light(s)") on/off.

    - üîÑ Optionally toggles an `alternating_entity` (e.g. LED indicator(s) on light switch button, referred to below as the "LED Indicator(s)") to the *inverse* of the state of your selected light(s)

    - ‚úÖ Quick set-up, especially for applications where 3 or more buttons are intended to control the same light(s) and you want the LED Indicators on each button to be synced in some way.

    - üîÑ Reusable across different button groups and lights.


    [Info - contact - feedback](https://github.com/jzxandy/HA-Blueprints)



    ### üîß Device Compatibility


    This blueprint is made for use with Moe‚Äôs Zigbee switches flashed with custom firmware and makes automating light controls in detached mode easier. Compatible Moe's zigbee switch models include:  

    - **TS0011** (1 gang)  

    - **TS0012** (2 gang)  

    - **TS0013** (3 gang)  


    These are no-neutral Tuya Zigbee switches and should be readily available for purchase on AliExpress.

   
    You can obtain the custom firmware for these switches (and other Tuya devices) thanks to Romasku [here](https://github.com/romasku/tuya-zigbee-switch).


    ### ‚öôÔ∏è Zigbee2MQTT Setup Requirements:

    **For each button (referred to below as "Button Toggle(s)"):**  

    - `switch mode` - `MOMENTARY`  

    - `switch action mode` - `TOGGLE`



    **For each relay that you want to supply constant power to your light(s):**  



    - `switch relay mode` - `DETACHED`  

    - `state` - `ON`  

    - `power-on behaviour` - `ON`


  domain: automation

  input:
    toggle_switch:
      name: Toggle Switch(es) *
      description: One or more switches (e.g. Zigbee buttons) that control the entities.
      selector:
        entity:
          domain: sensor
          multiple: true

    main_entity:
      name: Light(s) *
      description: Select the single or group light entity (or entities) your button/s to control simultaneously.
      selector:
        entity:
          domain: light
          multiple: true

    alternating_entity:
      name: LED Indicator(s)
      description: Optional - Enable this to automatically sync LED indicator(s) to reflect the *opposite* state to that of the selected light(s). You must set the relay indicator mode for each of the corresponding toggle switch(es) to "manual" in Z2M in order for this part of the automation to function properly. See above instructions relating to `IMPORTANT`.
      default: []
      selector:
        entity:
          domain: switch
          multiple: true

variables:
  toggle_switch: !input toggle_switch
  main_entity: !input main_entity
  alternating_entity: !input alternating_entity

trigger:
  - platform: state
    entity_id: !input toggle_switch
    from: "released"
    to: "press"

action:
  - service: system_log.write
    data:
      message: "Toggle switch pressed: {{ trigger.entity_id }}"
      level: warning

  - choose:
      - alias: "If no alternating entity is set"
        conditions:
          - "{{ alternating_entity == [] }}"
        sequence:
          - choose:
              - alias: "Any main entities are on ‚Üí turn them off"
                conditions:
                  - condition: state
                    entity_id: !input main_entity
                    match: any
                    state: 'on'
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: !input main_entity

              - alias: "All main entities are off ‚Üí turn them on"
                conditions:
                  - condition: state
                    entity_id: !input main_entity
                    match: all
                    state: 'off'
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input main_entity

    default:
      - choose:
          - alias: "Any main entities are on ‚Üí turn off main, turn on alternating"
            conditions:
              - condition: state
                entity_id: !input main_entity
                match: any
                state: 'on'
            sequence:
              - service: homeassistant.turn_off
                target:
                  entity_id: !input main_entity
              - service: homeassistant.turn_on
                target:
                  entity_id: !input alternating_entity

          - alias: "All main entities are off ‚Üí turn on main, turn off alternating"
            conditions:
              - condition: state
                entity_id: !input main_entity
                match: all
                state: 'off'
            sequence:
              - service: homeassistant.turn_on
                target:
                  entity_id: !input main_entity
              - service: homeassistant.turn_off
                target:
                  entity_id: !input alternating_entity

mode: single
