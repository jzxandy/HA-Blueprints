blueprint:
  name: Custom Moe's Zigbee Switch - Detached Mode - Extended - WITH Light Options
  description: >
    # ✳️ Button Switch - Turn ON & OFF Lights with one or more buttons

    - Allows multiple toggle switches to control the same set of entities.

    - Includes optional controls for brightness, transition and colour of the lights.
    
    - Triggers on `released` → `press` (e.g. flashed Moe’s Zigbee buttons).
    
    - Toggles `main_entity` on/off.
    
    - Optionally toggles `alternating_entity` to the inverse of `main_entity`.
    
    - ✅ Works well for momentary buttons that emit "press" events.
    
    - 🔁 Can be reused with different button groups for various lights.

    - **IMPORTANT - Ensure that for each button (referred to below as a toggle switch), you have the following settings enabled in Z2M for that particular button:**
    
    - "switch mode" = "MOMENTARY"
    
    - "switch action mode" = "TOGGLE"

    - **IMPORTANT - Ensure that for each LIGHT that you want to control in this automation, you have the following settings enabled in Z2M for the relay or relays that feed power to the lights:**
    
    - "switch relay mode" = "DETACHED"
    
    - "state" = ON
    
    - "power-on behaviour" = ON
  domain: automation

  input:
    toggle_switch:
      name: Button Toggle(s) *
      description: One or more flashed Moe's "switch press action switch" entity to control the lights. If you select more than one, each and every individual button in this list will control the light(s).
      selector:
        entity:
          domain: sensor
          multiple: true

    main_entity:
      name: Light(s) *
      description: Select the single or group light entity (or entities) that you want your button(s) to control simultaneously.
      selector:
        entity:
          domain: light
          multiple: true

    alternating_entity:
      name: LED Indicator(s)
      description: Optional - Enable this to automatically sync LED indicator(s) to reflect the *opposite* state to that of the selected light(s). You must set the relay indicator mode for each of the corresponding toggle switch(es) to "manual" in Z2M in order for this part of the automation to function properly. See above instructions relating to `IMPORTANT`.
      default: []
      selector:
        entity:
          domain: switch
          multiple: true

    include_light_control:
      name: Light Control Options
      description: Optional - Tick as applicable.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Use Brightness
              value: use_brightness
            - label: Use Transition
              value: use_transition

    light_brightness:
      name: Brightness (%)
      description: This brightness will be applied when the light is turned on by one or more button toggles.
      default: 100
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: '%'
          mode: slider

    light_transition_on:
      name: Transition On (s)
      description: Duration for the light(s) to go from "off" to maximum brightness.
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: 's'
          mode: slider

    light_transition_off:
      name: Transition Off (s)
      description: Duration for the light(s) to fully dim.
      default: 1
      selector:
        number:
          min: 0
          max: 30
          step: 1
          unit_of_measurement: 's'
          mode: slider

    include_light_colour_control:
      name: Light Colour Options
      description: Optional. Colour temperature for white channel(s) only. RGB for coloured channel(s) only. RGBW for colours and ONE white channel. RGBWW for colours, warm white and cool white.
      default: disable_colour_control
      selector:
        select:
          options:
            - label: Use Colour Temperature
              value: use_colour_temperature
            - label: Use RGB Colour
              value: use_rgb_colour
            - label: Use RGBW Colour
              value: use_rgbw_colour
            - label: Use RGBWW Colour
              value: use_rgbww_colour
            - label: Disable Colour Control
              value: disable_colour_control

    light_colour_temperature:
      name: Colour Temperature (Kelvin)
      description: Only works when "Use Colour Temperature" is selected.
      default: 5000
      selector:
        number:
          min: 2000
          max: 8000
          step: 100
          unit_of_measurement: 'K'
          mode: slider

    light_rgb_colour:
      name: RGB Colour
      description: Only works when "Use RGB Colour" is selected.
      default: [255, 255, 255]
      selector:
        color_rgb:

    light_rgbw_colour:
      name: RGBW Colour
      description: Only works when "Use RGBW Colour" is selected.
      default: [255, 255, 255, 255]
      selector:
        object:

    light_rgbww_colour:
      name: RGBWW Colour
      description: Only works when "Use RGBWW Colour" is selected.
      default: [255, 255, 255, 255, 255]
      selector:
        object:

mode: single

variables:
  main_entity: !input main_entity
  alternating_entity: !input alternating_entity
  include_light_control: !input include_light_control
  light_brightness: !input light_brightness
  light_transition_on: !input light_transition_on
  light_transition_off: !input light_transition_off
  include_light_colour_control: !input include_light_colour_control
  light_colour_temperature: !input light_colour_temperature
  light_rgb_colour: !input light_rgb_colour
  light_rgbw_colour: !input light_rgbw_colour
  light_rgbww_colour: !input light_rgbww_colour

  light_data: >
    {% set light = namespace(data={}) %}
    {% if 'use_transition' in include_light_control %}
      {% set light.data = dict(light.data, transition=light_transition_on) %}
    {% endif %}
    {% if 'use_brightness' in include_light_control %}
      {% set light.data = dict(light.data, brightness_pct=light_brightness) %}
    {% endif %}
    {% if include_light_colour_control == 'use_colour_temperature' %}
      {% set light.data = dict(light.data, color_temp_kelvin=light_colour_temperature) %}
    {% elif include_light_colour_control == 'use_rgb_colour' %}
      {% set light.data = dict(light.data, rgb_color=light_rgb_colour) %}
    {% elif include_light_colour_control == 'use_rgbw_colour' %}
      {% set light.data = dict(light.data, rgbw_color=light_rgbw_colour) %}
    {% elif include_light_colour_control == 'use_rgbww_colour' %}
      {% set light.data = dict(light.data, rgbww_color=light_rgbww_colour) %}
    {% endif %}
    {{ light.data }}

trigger:
  - platform: state
    entity_id: !input toggle_switch
    from: "released"
    to: "press"

action:
  - choose:
      - conditions: "{{ alternating_entity == [] }}"
        sequence:
          - choose:
              - conditions: "{{ expand(main_entity) | selectattr('state', 'eq', 'on') | list | count > 0 }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input main_entity
                    data:
                      transition: "{{ light_transition_off if 'use_transition' in include_light_control else 0 }}"
              - conditions: "{{ expand(main_entity) | selectattr('state', 'eq', 'off') | list | count == expand(main_entity) | list | count }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input main_entity
                    data: "{{ light_data }}"
    default:
      - choose:
          - conditions: "{{ expand(main_entity) | selectattr('state', 'eq', 'on') | list | count > 0 }}"
            sequence:
              - service: light.turn_off
                target:
                  entity_id: !input main_entity
                data:
                  transition: "{{ light_transition_off if 'use_transition' in include_light_control else 0 }}"
              - service: switch.turn_on
                target:
                  entity_id: !input alternating_entity
          - conditions: "{{ expand(main_entity) | selectattr('state', 'eq', 'off') | list | count == expand(main_entity) | list | count }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input main_entity
                data: "{{ light_data }}"
              - service: switch.turn_off
                target:
                  entity_id: !input alternating_entity
